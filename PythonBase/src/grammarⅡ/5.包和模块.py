# -*- coding: utf-8 -*-

层次结构
包   ->  模块  ->  类   ->  函数/变量

一个包下面可以写多个模块,多个类.

包:类似于文件夹,具有特殊文件表示__init__.py文件,进行管理
模块:一个文件
类:  class定义的代码块

__init__.py   表示所在的包,其文件名为包名.

命名空间:区分不同模块下的相同模块名的文件

引用文件:
    import 包名.模块名
    import 包名.模块名  as  模块别名
    import 包名.模块名.函数名
    当导入的文件在同级别包中,则不需要写全路径.

    from 包名 import 模块1, 模块2 , 模块3
    当导入的文件在同级别包中,则不需要写全路径.

    from 包名.模块名 import 变量/方法/* , 变量2/方法2 ,变量3/方法3
    当导入的文件在同级别包中,则不需要写全路径.
    当使用*表示导入全部的变量/方法
    可以直接使用变量或者方法

控制导入的变量/方法限制,在源文件中添加限制__all__,指定变量/方法列表
__all__ = [变量1/方法1 , 变量2/方法2]

使用\ 反斜杠进行换行,或者()进行包裹多行

__init__.py 文件:当导入包的时候,该文件会立即执行
                通过在该文件中添加__all__  = [模块1 , 模块2] 进行限制,哪些模块可以被导入
                通过在改文件中添加import,可以看做将其他模块导入到本包目录下,在导入时,执行导入代码实现批量导入.
                包并不会被重复导入

注意,当导入文件时,会执行文件内的所有代码,同时只会执行一次





